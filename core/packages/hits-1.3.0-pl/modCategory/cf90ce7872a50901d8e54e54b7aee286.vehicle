<?php return array (
  'unique_key' => 'category',
  'preserve_keys' => false,
  'update_object' => true,
  'related_objects' => 
  array (
    'Snippets' => 
    array (
      '941e9f82a337c0ef412f35f6c13784f3' => 
      array (
        'preserve_keys' => false,
        'update_object' => true,
        'unique_key' => 'name',
        'class' => 'modSnippet',
        'object' => '{"id":1,"source":0,"property_preprocess":0,"name":"Hits","description":"Displays a list of Hits.","editor_type":0,"category":0,"cache_type":0,"snippet":"\\/*          __             \\t\\/\\/ Hits for MODX Revolution\\n\\/\\\\ \\\\      __\\/\\\\ \\\\__          \\t    come to us for your dirty work\\n\\\\ \\\\ \\\\___ \\/\\\\_\\\\ \\\\ ,_\\\\   ____  \\t\\tcreated by:\\n \\\\ \\\\  _ `\\\\\\/\\\\ \\\\ \\\\ \\\\\\/  \\/\',__\\\\ \\t\\tJP DeVries @jpdevries\\n  \\\\ \\\\ \\\\ \\\\ \\\\ \\\\ \\\\ \\\\ \\\\_\\/\\\\__, `\\\\\\t\\tYJ Tso @sepiariver\\n   \\\\ \\\\_\\\\ \\\\_\\\\ \\\\_\\\\ \\\\__\\\\\\/\\\\____\\/\\t\\tJason Coward @drumshaman\\n    \\\\\\/_\\/\\\\\\/_\\/\\\\\\/_\\/\\\\\\/__\\/\\\\\\/__*\\/ \\n\\t\\t\\/* tracks page hits per hit_key\\n\\n\\t\\tUSAGE: (assumes a chunk named hitID contains \\"[[+hit_key]]\\")\\n\\t\\tGet a comma seperated list of ids of the 10 most visited pages 10 levels down from the web context\\n\\t\\t[[!Hits? &parents=`0` &depth=`10` &limit=`10` &outSeperator=`,` &chunk=`hitID`]]\\n\\n\\t\\tGet a comma seperated list of ids of the 4 least visited pages that are children of resource 2 and set results to a placeholder\\n\\t\\t[[!Hits? &parents=`2` limit=`4` &dir=`ASC`  &outSeperator=`,` &chunk=`hitID` &toPlaceholder=`hits`]]\\n\\n\\t\\tRecord a hit for resource 3\\n\\t\\t[[!Hits? &punch=`3`]]\\n\\n\\t\\tRecord 20 hit for resource 4\\n\\t\\t[[!Hits? &punch=`4` &amount=`20`]]\\n\\n\\t\\tRemove 4 hit from resource 5\\n\\t\\t[[!Hits? &punch=`5` &amount=`-4`]]\\n\\n\\t\\tGet the four most hit resources, discluding the first\\n\\t\\t[[!Hits? &parents=`0` &limit=`4` &offset=`1` &outputSeparator=`,`]]\\n\\n\\t\\tKnockout resource 3 then add 2 hits (knockout zeros value before adding punches)\\n\\t\\t[[!Hits? &punch=`3` &amount=`2` &knockout=`1`]]\\n\\t\\t\\n*\\/ \\n\\n\\/\\/ get the hit service\\n$defaultHitsCorePath = $modx->getOption(\'core_path\').\'components\\/hits\\/\';\\n$hitsCorePath = $modx->getOption(\'hits.core_path\',null,$defaultHitsCorePath);\\n$hitService = $modx->getService(\'hits\',\'Hits\',$hitsCorePath.\'model\\/hits\\/\',$scriptProperties);\\n\\nif (!($hitService instanceof Hits)) return \'failed\'; \\/\\/ you\'ll need another fool to do your dirty work\\n\\n$s = \'\';\\n\\n\\/* setup default properties *\\/\\n$punch = $modx->getOption(\'punch\',$scriptProperties,null); \\n(integer)$amount = $modx->getOption(\'amount\',$scriptProperties,1);\\n$sort = $modx->getOption(\'sort\',$scriptProperties,\'hit_count\');\\n$dir = $modx->getOption(\'dir\',$scriptProperties,\'DESC\');\\n$parents = $modx->getOption(\'parents\',$scriptProperties,null);\\n$hit_keys = explode(\',\',$modx->getOption(\'hit_keys\',$scriptProperties,null));\\n$tpl = $modx->getOption(\'tpl\',$scriptProperties,\'hitTpl\'); \\n$limit = $modx->getOption(\'limit\',$scriptProperties,5);\\n(integer)$depth = $modx->getOption(\'depth\',$scriptProperties,10);\\n$outputSeparator = $modx->getOption(\'outputSeparator\',$scriptProperties,\\"\\\\n\\");\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\',$scriptProperties,\\"\\");\\n$offset = isset($offset) ? (integer) $offset : 0;\\n$knockout = (bool)$modx->getOption(\'knockout\',$scriptProperties,false);\\n\\nif(trim($parents) == \'0\') $parents = array(0); \\/\\/ i know, i know\\nelse if($parents) $parents = explode(\',\', $parents);\\n\\nif($depth < 1) $depth = 1;\\n\\n\\/\\/ don\'t just go throwing punches blindy, only store a page hit if told to do so\\nif($punch && $amount) {\\n\\t$hit = $modx->getObject(\'Hit\',array(\\n\\t\\t\'hit_key\' => $punch\\n\\t));\\n\\n\\tif($hit) {\\n\\t\\t\\/\\/ increment the amount\\n\\t\\t$hit->set(\'hit_count\',($knockout ? 0 : (integer)$hit->get(\'hit_count\')) + $amount); \\n\\t\\t$hit->save();\\n\\t} else {\\n\\t\\t\\/\\/ create a new hit record\\n\\t\\t$hit = $modx->newObject(\'Hit\');\\n\\t\\t$hit->fromArray(array(\\n\\t\\t\\t\'hit_key\' => $punch,\\n\\t\\t\\t\'hit_count\' => $amount\\n\\t\\t));\\n\\t\\t$hit->save();\\t\\n\\t\\t\\n\\t}\\n}\\n\\n$s = \'\';\\n\\/\\/ create an array of child ids to compare hits\\n    \\n$hits = array();\\n$childIds = array();\\nif(count($parents)) {\\n\\tforeach($parents as $parent) {\\n\\t\\t$childIds = array_merge($childIds,$modx->getChildIds($parent,$depth));\\n\\t} \\n    $childIds = array_unique($childIds);\\n    $hits = $hitService->getHits($childIds, $sort, $dir, $limit, $offset);\\n} \\n\\nif(!is_null($hit_keys)) {\\n    $hit_keys = array_diff($hit_keys,$childIds);\\n    $hits = array_merge($hits,$hitService->getHits($hit_keys, $sort, $dir, $limit, $offset));\\n}\\n\\n$hs = $hitService->processHits($hits,$tpl);\\n$s = implode($outputSeparator, $hs);\\n\\n\\nif($toPlaceholder) { \\/\\/ would you like that for here or to go?\\n\\t$modx->setPlaceholder($toPlaceholder,$s);\\n\\treturn;\\n}\\n\\n\\nreturn $s;","locked":0,"properties":"a:0:{}","moduleguid":"","static":0,"static_file":"","content":"\\/*          __             \\t\\/\\/ Hits for MODX Revolution\\n\\/\\\\ \\\\      __\\/\\\\ \\\\__          \\t    come to us for your dirty work\\n\\\\ \\\\ \\\\___ \\/\\\\_\\\\ \\\\ ,_\\\\   ____  \\t\\tcreated by:\\n \\\\ \\\\  _ `\\\\\\/\\\\ \\\\ \\\\ \\\\\\/  \\/\',__\\\\ \\t\\tJP DeVries @jpdevries\\n  \\\\ \\\\ \\\\ \\\\ \\\\ \\\\ \\\\ \\\\ \\\\_\\/\\\\__, `\\\\\\t\\tYJ Tso @sepiariver\\n   \\\\ \\\\_\\\\ \\\\_\\\\ \\\\_\\\\ \\\\__\\\\\\/\\\\____\\/\\t\\tJason Coward @drumshaman\\n    \\\\\\/_\\/\\\\\\/_\\/\\\\\\/_\\/\\\\\\/__\\/\\\\\\/__*\\/ \\n\\t\\t\\/* tracks page hits per hit_key\\n\\n\\t\\tUSAGE: (assumes a chunk named hitID contains \\"[[+hit_key]]\\")\\n\\t\\tGet a comma seperated list of ids of the 10 most visited pages 10 levels down from the web context\\n\\t\\t[[!Hits? &parents=`0` &depth=`10` &limit=`10` &outSeperator=`,` &chunk=`hitID`]]\\n\\n\\t\\tGet a comma seperated list of ids of the 4 least visited pages that are children of resource 2 and set results to a placeholder\\n\\t\\t[[!Hits? &parents=`2` limit=`4` &dir=`ASC`  &outSeperator=`,` &chunk=`hitID` &toPlaceholder=`hits`]]\\n\\n\\t\\tRecord a hit for resource 3\\n\\t\\t[[!Hits? &punch=`3`]]\\n\\n\\t\\tRecord 20 hit for resource 4\\n\\t\\t[[!Hits? &punch=`4` &amount=`20`]]\\n\\n\\t\\tRemove 4 hit from resource 5\\n\\t\\t[[!Hits? &punch=`5` &amount=`-4`]]\\n\\n\\t\\tGet the four most hit resources, discluding the first\\n\\t\\t[[!Hits? &parents=`0` &limit=`4` &offset=`1` &outputSeparator=`,`]]\\n\\n\\t\\tKnockout resource 3 then add 2 hits (knockout zeros value before adding punches)\\n\\t\\t[[!Hits? &punch=`3` &amount=`2` &knockout=`1`]]\\n\\t\\t\\n*\\/ \\n\\n\\/\\/ get the hit service\\n$defaultHitsCorePath = $modx->getOption(\'core_path\').\'components\\/hits\\/\';\\n$hitsCorePath = $modx->getOption(\'hits.core_path\',null,$defaultHitsCorePath);\\n$hitService = $modx->getService(\'hits\',\'Hits\',$hitsCorePath.\'model\\/hits\\/\',$scriptProperties);\\n\\nif (!($hitService instanceof Hits)) return \'failed\'; \\/\\/ you\'ll need another fool to do your dirty work\\n\\n$s = \'\';\\n\\n\\/* setup default properties *\\/\\n$punch = $modx->getOption(\'punch\',$scriptProperties,null); \\n(integer)$amount = $modx->getOption(\'amount\',$scriptProperties,1);\\n$sort = $modx->getOption(\'sort\',$scriptProperties,\'hit_count\');\\n$dir = $modx->getOption(\'dir\',$scriptProperties,\'DESC\');\\n$parents = $modx->getOption(\'parents\',$scriptProperties,null);\\n$hit_keys = explode(\',\',$modx->getOption(\'hit_keys\',$scriptProperties,null));\\n$tpl = $modx->getOption(\'tpl\',$scriptProperties,\'hitTpl\'); \\n$limit = $modx->getOption(\'limit\',$scriptProperties,5);\\n(integer)$depth = $modx->getOption(\'depth\',$scriptProperties,10);\\n$outputSeparator = $modx->getOption(\'outputSeparator\',$scriptProperties,\\"\\\\n\\");\\n$toPlaceholder = $modx->getOption(\'toPlaceholder\',$scriptProperties,\\"\\");\\n$offset = isset($offset) ? (integer) $offset : 0;\\n$knockout = (bool)$modx->getOption(\'knockout\',$scriptProperties,false);\\n\\nif(trim($parents) == \'0\') $parents = array(0); \\/\\/ i know, i know\\nelse if($parents) $parents = explode(\',\', $parents);\\n\\nif($depth < 1) $depth = 1;\\n\\n\\/\\/ don\'t just go throwing punches blindy, only store a page hit if told to do so\\nif($punch && $amount) {\\n\\t$hit = $modx->getObject(\'Hit\',array(\\n\\t\\t\'hit_key\' => $punch\\n\\t));\\n\\n\\tif($hit) {\\n\\t\\t\\/\\/ increment the amount\\n\\t\\t$hit->set(\'hit_count\',($knockout ? 0 : (integer)$hit->get(\'hit_count\')) + $amount); \\n\\t\\t$hit->save();\\n\\t} else {\\n\\t\\t\\/\\/ create a new hit record\\n\\t\\t$hit = $modx->newObject(\'Hit\');\\n\\t\\t$hit->fromArray(array(\\n\\t\\t\\t\'hit_key\' => $punch,\\n\\t\\t\\t\'hit_count\' => $amount\\n\\t\\t));\\n\\t\\t$hit->save();\\t\\n\\t\\t\\n\\t}\\n}\\n\\n$s = \'\';\\n\\/\\/ create an array of child ids to compare hits\\n    \\n$hits = array();\\n$childIds = array();\\nif(count($parents)) {\\n\\tforeach($parents as $parent) {\\n\\t\\t$childIds = array_merge($childIds,$modx->getChildIds($parent,$depth));\\n\\t} \\n    $childIds = array_unique($childIds);\\n    $hits = $hitService->getHits($childIds, $sort, $dir, $limit, $offset);\\n} \\n\\nif(!is_null($hit_keys)) {\\n    $hit_keys = array_diff($hit_keys,$childIds);\\n    $hits = array_merge($hits,$hitService->getHits($hit_keys, $sort, $dir, $limit, $offset));\\n}\\n\\n$hs = $hitService->processHits($hits,$tpl);\\n$s = implode($outputSeparator, $hs);\\n\\n\\nif($toPlaceholder) { \\/\\/ would you like that for here or to go?\\n\\t$modx->setPlaceholder($toPlaceholder,$s);\\n\\treturn;\\n}\\n\\n\\nreturn $s;"}',
        'guid' => 'd931a50a21e115909f1c333136c2c4ce',
        'native_key' => 1,
        'signature' => '77e143b6113d56ad435e746d196906df',
      ),
    ),
  ),
  'related_object_attributes' => 
  array (
    'Snippets' => 
    array (
      'preserve_keys' => false,
      'update_object' => true,
      'unique_key' => 'name',
    ),
  ),
  'namespace' => 'hits',
  'resolve' => 
  array (
    0 => 
    array (
      'type' => 'file',
      'body' => '{"source":"hits-1.3.0-pl\\/modCategory\\/cf90ce7872a50901d8e54e54b7aee286\\/0\\/","target":"return MODX_CORE_PATH . \'components\\/\';","name":"hits"}',
    ),
    1 => 
    array (
      'type' => 'php',
      'body' => '{"source":"hits-1.3.0-pl\\/modCategory\\/cf90ce7872a50901d8e54e54b7aee286.resolve.tables.resolver","type":"php","name":"resolve.tables"}',
    ),
  ),
  'validate' => NULL,
  'vehicle_package' => 'transport',
  'vehicle_class' => 'xPDOObjectVehicle',
  'guid' => '8b8b969d1913e4ec109474f174976eaf',
  'package' => 'modx',
  'class' => 'modCategory',
  'signature' => 'cf90ce7872a50901d8e54e54b7aee286',
  'native_key' => 1,
  'object' => '{"id":1,"parent":0,"category":"Hits"}',
);